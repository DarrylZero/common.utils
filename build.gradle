buildscript {
    repositories {
        jcenter()
        maven { url "https://clojars.org/repo" }
        mavenLocal()
    }

    dependencies {
        classpath 'com.steammachine.org:gradle.copy.plugin:0.9.0'
        classpath 'com.steammachine.org:gradle.plugins:0.9.3'
        classpath 'com.steammachine.org:gradle.substitute.plugin:1.0.2'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

plugins {
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "maven"
apply plugin: 'com.steammachine.org.gradle.properties.plugins'
apply plugin: 'com.steammachine.org.gradle.copyresources.plugin'
apply plugin: 'com.steammachine.org.gradle.substitute.plugin'
apply plugin: 'org.junit.platform.gradle.plugin'

import com.steammachine.org.gradle.substitute.plugin.FileModifier
import com.steammachine.org.gradle.substitute.plugin.predefinedsubstitutions.FunctionSubstitution


repositories {
    jcenter()
    maven { url 'https://clojars.org/repo' }
}

auxprops.set('deploy') {
    propertyFile file('publish.properties')
}

group = deploy.group
version = deploy.version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
//    compile 'log4j:log4j:1.2.17'
//    compile 'org.mockito:mockito-all:1.9.5'

    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M6'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M6'
    testCompile 'junit:junit:4.12'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M6'
    testCompile 'org.junit.vintage:junit-vintage-engine:4.12.0-M6'
    testCompile 'org.junit.platform:junit-platform-launcher:1.0.0-M6'
}

junitPlatform {
    filters {
        includeClassNamePatterns '.*Check'
    }
}


jar {
    manifest {
        attributes(
                "Implementation-Title": deploy.title,
                "Implementation-Version": deploy.version,
                "Description": deploy.description
        )
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"

    manifest {
        attributes(
                "Implementation-Title": deploy.title,
                "Implementation-Version": deploy.version,
                "Description": deploy.sourcecode_description,
        )
    }
}

def artefacts_publications_username = hasProperty('repo_user') ? repo_user : 'repo_user'
def artefacts_publications_password = hasProperty('repo_password') ? repo_password : 'repo_password'

publishing {
    repositories {
        maven {
            credentials {
                username = artefacts_publications_username
                password = artefacts_publications_password
            }
            url 'https://clojars.org/repo'
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId deploy.group
            artifactId deploy.artifact
            version deploy.version
            from components.java

            artifact sourceJar
        }
    }
}

task buildandsources(dependsOn: [sourceJar, build]) {}

task findbreaks(type: FileModifier) {
    rule(FunctionSubstitution) {
        find = '#BREAK'
        operation = {
            throw new IllegalStateException()
        }
    }
}
